# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""SWIG wrapper for the CGAL 3D Fast Intersection and Distance Computation package provided under the GPL-3.0+ license"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CGAL_AABB_tree
else:
    import _CGAL_AABB_tree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import CGAL.CGAL_Kernel
import CGAL.CGAL_Polyhedron_3
class Object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Object_swiginit(self, _CGAL_AABB_tree.new_Object())

    def is_Point_2(self):
        return _CGAL_AABB_tree.Object_is_Point_2(self)

    def get_Point_2(self):
        return _CGAL_AABB_tree.Object_get_Point_2(self)

    def is_Point_3(self):
        return _CGAL_AABB_tree.Object_is_Point_3(self)

    def get_Point_3(self):
        return _CGAL_AABB_tree.Object_get_Point_3(self)

    def is_Triangle_2(self):
        return _CGAL_AABB_tree.Object_is_Triangle_2(self)

    def get_Triangle_2(self):
        return _CGAL_AABB_tree.Object_get_Triangle_2(self)

    def is_Triangle_3(self):
        return _CGAL_AABB_tree.Object_is_Triangle_3(self)

    def get_Triangle_3(self):
        return _CGAL_AABB_tree.Object_get_Triangle_3(self)

    def is_Segment_3(self):
        return _CGAL_AABB_tree.Object_is_Segment_3(self)

    def get_Segment_3(self):
        return _CGAL_AABB_tree.Object_get_Segment_3(self)

    def is_Segment_2(self):
        return _CGAL_AABB_tree.Object_is_Segment_2(self)

    def get_Segment_2(self):
        return _CGAL_AABB_tree.Object_get_Segment_2(self)

    def is_Line_3(self):
        return _CGAL_AABB_tree.Object_is_Line_3(self)

    def get_Line_3(self):
        return _CGAL_AABB_tree.Object_get_Line_3(self)

    def is_Line_2(self):
        return _CGAL_AABB_tree.Object_is_Line_2(self)

    def get_Line_2(self):
        return _CGAL_AABB_tree.Object_get_Line_2(self)

    def is_Plane_3(self):
        return _CGAL_AABB_tree.Object_is_Plane_3(self)

    def get_Plane_3(self):
        return _CGAL_AABB_tree.Object_get_Plane_3(self)

    def is_Ray_2(self):
        return _CGAL_AABB_tree.Object_is_Ray_2(self)

    def get_Ray_2(self):
        return _CGAL_AABB_tree.Object_get_Ray_2(self)

    def is_Ray_3(self):
        return _CGAL_AABB_tree.Object_is_Ray_3(self)

    def get_Ray_3(self):
        return _CGAL_AABB_tree.Object_get_Ray_3(self)

    def is_Polygon_2(self):
        return _CGAL_AABB_tree.Object_is_Polygon_2(self)

    def get_Polygon_2(self):
        return _CGAL_AABB_tree.Object_get_Polygon_2(self)

    def empty(self):
        return _CGAL_AABB_tree.Object_empty(self)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Object

# Register Object in _CGAL_AABB_tree:
_CGAL_AABB_tree.Object_swigregister(Object)

class Point_and_Polyhedron_3_Facet_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.Point_and_Polyhedron_3_Facet_handle_swiginit(self, _CGAL_AABB_tree.new_Point_and_Polyhedron_3_Facet_handle(*args))
    first = property(_CGAL_AABB_tree.Point_and_Polyhedron_3_Facet_handle_first_get, _CGAL_AABB_tree.Point_and_Polyhedron_3_Facet_handle_first_set)
    second = property(_CGAL_AABB_tree.Point_and_Polyhedron_3_Facet_handle_second_get, _CGAL_AABB_tree.Point_and_Polyhedron_3_Facet_handle_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_AABB_tree.delete_Point_and_Polyhedron_3_Facet_handle

# Register Point_and_Polyhedron_3_Facet_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Point_and_Polyhedron_3_Facet_handle_swigregister(Point_and_Polyhedron_3_Facet_handle)

class Point_and_Polyhedron_3_Halfedge_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.Point_and_Polyhedron_3_Halfedge_handle_swiginit(self, _CGAL_AABB_tree.new_Point_and_Polyhedron_3_Halfedge_handle(*args))
    first = property(_CGAL_AABB_tree.Point_and_Polyhedron_3_Halfedge_handle_first_get, _CGAL_AABB_tree.Point_and_Polyhedron_3_Halfedge_handle_first_set)
    second = property(_CGAL_AABB_tree.Point_and_Polyhedron_3_Halfedge_handle_second_get, _CGAL_AABB_tree.Point_and_Polyhedron_3_Halfedge_handle_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_AABB_tree.delete_Point_and_Polyhedron_3_Halfedge_handle

# Register Point_and_Polyhedron_3_Halfedge_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Point_and_Polyhedron_3_Halfedge_handle_swigregister(Point_and_Polyhedron_3_Halfedge_handle)

class Point_and_Integer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.Point_and_Integer_swiginit(self, _CGAL_AABB_tree.new_Point_and_Integer(*args))
    first = property(_CGAL_AABB_tree.Point_and_Integer_first_get, _CGAL_AABB_tree.Point_and_Integer_first_set)
    second = property(_CGAL_AABB_tree.Point_and_Integer_second_get, _CGAL_AABB_tree.Point_and_Integer_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_AABB_tree.delete_Point_and_Integer

# Register Point_and_Integer in _CGAL_AABB_tree:
_CGAL_AABB_tree.Point_and_Integer_swigregister(Point_and_Integer)

class Object_and_Polyhedron_3_Facet_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.Object_and_Polyhedron_3_Facet_handle_swiginit(self, _CGAL_AABB_tree.new_Object_and_Polyhedron_3_Facet_handle(*args))
    first = property(_CGAL_AABB_tree.Object_and_Polyhedron_3_Facet_handle_first_get, _CGAL_AABB_tree.Object_and_Polyhedron_3_Facet_handle_first_set)
    second = property(_CGAL_AABB_tree.Object_and_Polyhedron_3_Facet_handle_second_get, _CGAL_AABB_tree.Object_and_Polyhedron_3_Facet_handle_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_AABB_tree.delete_Object_and_Polyhedron_3_Facet_handle

# Register Object_and_Polyhedron_3_Facet_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Object_and_Polyhedron_3_Facet_handle_swigregister(Object_and_Polyhedron_3_Facet_handle)

class Object_and_Polyhedron_3_Halfedge_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.Object_and_Polyhedron_3_Halfedge_handle_swiginit(self, _CGAL_AABB_tree.new_Object_and_Polyhedron_3_Halfedge_handle(*args))
    first = property(_CGAL_AABB_tree.Object_and_Polyhedron_3_Halfedge_handle_first_get, _CGAL_AABB_tree.Object_and_Polyhedron_3_Halfedge_handle_first_set)
    second = property(_CGAL_AABB_tree.Object_and_Polyhedron_3_Halfedge_handle_second_get, _CGAL_AABB_tree.Object_and_Polyhedron_3_Halfedge_handle_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_AABB_tree.delete_Object_and_Polyhedron_3_Halfedge_handle

# Register Object_and_Polyhedron_3_Halfedge_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Object_and_Polyhedron_3_Halfedge_handle_swigregister(Object_and_Polyhedron_3_Halfedge_handle)

class Object_and_Integer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.Object_and_Integer_swiginit(self, _CGAL_AABB_tree.new_Object_and_Integer(*args))
    first = property(_CGAL_AABB_tree.Object_and_Integer_first_get, _CGAL_AABB_tree.Object_and_Integer_first_set)
    second = property(_CGAL_AABB_tree.Object_and_Integer_second_get, _CGAL_AABB_tree.Object_and_Integer_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_AABB_tree.delete_Object_and_Integer

# Register Object_and_Integer in _CGAL_AABB_tree:
_CGAL_AABB_tree.Object_and_Integer_swigregister(Object_and_Integer)

class Optional_Polyhedron_3_Halfedge_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Optional_Polyhedron_3_Halfedge_handle_swiginit(self, _CGAL_AABB_tree.new_Optional_Polyhedron_3_Halfedge_handle())

    def empty(self):
        return _CGAL_AABB_tree.Optional_Polyhedron_3_Halfedge_handle_empty(self)

    def value(self):
        return _CGAL_AABB_tree.Optional_Polyhedron_3_Halfedge_handle_value(self)

    def deepcopy(self, *args):
        return _CGAL_AABB_tree.Optional_Polyhedron_3_Halfedge_handle_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Optional_Polyhedron_3_Halfedge_handle

# Register Optional_Polyhedron_3_Halfedge_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Optional_Polyhedron_3_Halfedge_handle_swigregister(Optional_Polyhedron_3_Halfedge_handle)

class Optional_Polyhedron_3_Facet_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Optional_Polyhedron_3_Facet_handle_swiginit(self, _CGAL_AABB_tree.new_Optional_Polyhedron_3_Facet_handle())

    def empty(self):
        return _CGAL_AABB_tree.Optional_Polyhedron_3_Facet_handle_empty(self)

    def value(self):
        return _CGAL_AABB_tree.Optional_Polyhedron_3_Facet_handle_value(self)

    def deepcopy(self, *args):
        return _CGAL_AABB_tree.Optional_Polyhedron_3_Facet_handle_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Optional_Polyhedron_3_Facet_handle

# Register Optional_Polyhedron_3_Facet_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Optional_Polyhedron_3_Facet_handle_swigregister(Optional_Polyhedron_3_Facet_handle)

class Optional_Integer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Optional_Integer_swiginit(self, _CGAL_AABB_tree.new_Optional_Integer())

    def empty(self):
        return _CGAL_AABB_tree.Optional_Integer_empty(self)

    def value(self):
        return _CGAL_AABB_tree.Optional_Integer_value(self)

    def deepcopy(self, *args):
        return _CGAL_AABB_tree.Optional_Integer_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Optional_Integer

# Register Optional_Integer in _CGAL_AABB_tree:
_CGAL_AABB_tree.Optional_Integer_swigregister(Optional_Integer)

class Optional_Object_and_Polyhedron_3_Halfedge_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Halfedge_handle_swiginit(self, _CGAL_AABB_tree.new_Optional_Object_and_Polyhedron_3_Halfedge_handle())

    def empty(self):
        return _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Halfedge_handle_empty(self)

    def value(self):
        return _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Halfedge_handle_value(self)

    def deepcopy(self, *args):
        return _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Halfedge_handle_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Optional_Object_and_Polyhedron_3_Halfedge_handle

# Register Optional_Object_and_Polyhedron_3_Halfedge_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Halfedge_handle_swigregister(Optional_Object_and_Polyhedron_3_Halfedge_handle)

class Optional_Object_and_Polyhedron_3_Facet_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Facet_handle_swiginit(self, _CGAL_AABB_tree.new_Optional_Object_and_Polyhedron_3_Facet_handle())

    def empty(self):
        return _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Facet_handle_empty(self)

    def value(self):
        return _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Facet_handle_value(self)

    def deepcopy(self, *args):
        return _CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Facet_handle_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Optional_Object_and_Polyhedron_3_Facet_handle

# Register Optional_Object_and_Polyhedron_3_Facet_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.Optional_Object_and_Polyhedron_3_Facet_handle_swigregister(Optional_Object_and_Polyhedron_3_Facet_handle)

class Optional_Object_and_Integer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_AABB_tree.Optional_Object_and_Integer_swiginit(self, _CGAL_AABB_tree.new_Optional_Object_and_Integer())

    def empty(self):
        return _CGAL_AABB_tree.Optional_Object_and_Integer_empty(self)

    def value(self):
        return _CGAL_AABB_tree.Optional_Object_and_Integer_value(self)

    def deepcopy(self, *args):
        return _CGAL_AABB_tree.Optional_Object_and_Integer_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_Optional_Object_and_Integer

# Register Optional_Object_and_Integer in _CGAL_AABB_tree:
_CGAL_AABB_tree.Optional_Object_and_Integer_swigregister(Optional_Object_and_Integer)

class AABB_tree_Polyhedron_3_Facet_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_swiginit(self, _CGAL_AABB_tree.new_AABB_tree_Polyhedron_3_Facet_handle(*args))

    def rebuild(self, range):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_rebuild(self, range)

    def clear(self):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_clear(self)

    def size(self):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_size(self)

    def empty(self):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_empty(self)

    def do_intersect(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_do_intersect(self, *args)

    def number_of_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_number_of_intersected_primitives(self, *args)

    def all_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_all_intersected_primitives(self, *args)

    def any_intersected_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_any_intersected_primitive(self, *args)

    def any_intersection(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_any_intersection(self, *args)

    def all_intersections(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_all_intersections(self, *args)

    def squared_distance(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_squared_distance(self, *args)

    def closest_point(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_closest_point(self, *args)

    def closest_point_and_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_closest_point_and_primitive(self, *args)

    def accelerate_distance_queries(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_accelerate_distance_queries(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_AABB_tree_Polyhedron_3_Facet_handle

# Register AABB_tree_Polyhedron_3_Facet_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.AABB_tree_Polyhedron_3_Facet_handle_swigregister(AABB_tree_Polyhedron_3_Facet_handle)

class AABB_tree_Polyhedron_3_Halfedge_handle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_swiginit(self, _CGAL_AABB_tree.new_AABB_tree_Polyhedron_3_Halfedge_handle(*args))

    def rebuild(self, range):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_rebuild(self, range)

    def clear(self):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_clear(self)

    def size(self):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_size(self)

    def empty(self):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_empty(self)

    def do_intersect(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_do_intersect(self, *args)

    def number_of_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_number_of_intersected_primitives(self, *args)

    def all_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_all_intersected_primitives(self, *args)

    def any_intersected_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_any_intersected_primitive(self, *args)

    def any_intersection(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_any_intersection(self, *args)

    def all_intersections(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_all_intersections(self, *args)

    def squared_distance(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_squared_distance(self, *args)

    def closest_point(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_closest_point(self, *args)

    def closest_point_and_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_closest_point_and_primitive(self, *args)

    def accelerate_distance_queries(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_accelerate_distance_queries(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_AABB_tree_Polyhedron_3_Halfedge_handle

# Register AABB_tree_Polyhedron_3_Halfedge_handle in _CGAL_AABB_tree:
_CGAL_AABB_tree.AABB_tree_Polyhedron_3_Halfedge_handle_swigregister(AABB_tree_Polyhedron_3_Halfedge_handle)

class AABB_tree_Segment_3_soup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.AABB_tree_Segment_3_soup_swiginit(self, _CGAL_AABB_tree.new_AABB_tree_Segment_3_soup(*args))

    def insert_from_array(self, input):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_insert_from_array(self, input)

    def rebuild(self, range):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_rebuild(self, range)

    def clear(self):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_clear(self)

    def size(self):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_size(self)

    def empty(self):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_empty(self)

    def do_intersect(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_do_intersect(self, *args)

    def number_of_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_number_of_intersected_primitives(self, *args)

    def all_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_all_intersected_primitives(self, *args)

    def any_intersected_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_any_intersected_primitive(self, *args)

    def any_intersection(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_any_intersection(self, *args)

    def all_intersections(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_all_intersections(self, *args)

    def squared_distance(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_squared_distance(self, *args)

    def closest_point(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_closest_point(self, *args)

    def closest_point_and_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_closest_point_and_primitive(self, *args)

    def accelerate_distance_queries(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Segment_3_soup_accelerate_distance_queries(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_AABB_tree_Segment_3_soup

# Register AABB_tree_Segment_3_soup in _CGAL_AABB_tree:
_CGAL_AABB_tree.AABB_tree_Segment_3_soup_swigregister(AABB_tree_Segment_3_soup)

class AABB_tree_Triangle_3_soup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_swiginit(self, _CGAL_AABB_tree.new_AABB_tree_Triangle_3_soup(*args))

    def insert_from_array(self, input):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_insert_from_array(self, input)

    def rebuild(self, range):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_rebuild(self, range)

    def clear(self):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_clear(self)

    def size(self):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_size(self)

    def empty(self):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_empty(self)

    def do_intersect(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_do_intersect(self, *args)

    def number_of_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_number_of_intersected_primitives(self, *args)

    def all_intersected_primitives(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_all_intersected_primitives(self, *args)

    def any_intersected_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_any_intersected_primitive(self, *args)

    def any_intersection(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_any_intersection(self, *args)

    def all_intersections(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_all_intersections(self, *args)

    def squared_distance(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_squared_distance(self, *args)

    def closest_point(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_closest_point(self, *args)

    def closest_point_and_primitive(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_closest_point_and_primitive(self, *args)

    def accelerate_distance_queries(self, *args):
        return _CGAL_AABB_tree.AABB_tree_Triangle_3_soup_accelerate_distance_queries(self, *args)
    __swig_destroy__ = _CGAL_AABB_tree.delete_AABB_tree_Triangle_3_soup

# Register AABB_tree_Triangle_3_soup in _CGAL_AABB_tree:
_CGAL_AABB_tree.AABB_tree_Triangle_3_soup_swigregister(AABB_tree_Triangle_3_soup)



