# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""SWIG wrapper for the CGAL 3D Point Set Processing package provided under the GPL-3.0+ license"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CGAL_Point_set_processing_3
else:
    import _CGAL_Point_set_processing_3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import CGAL.CGAL_Kernel
import CGAL.CGAL_Point_set_3

def bilateral_smooth_point_set(point_set, k, neighbor_radius=0., sharpness_angle=30.):
    return _CGAL_Point_set_processing_3.bilateral_smooth_point_set(point_set, k, neighbor_radius, sharpness_angle)

def compute_average_spacing(point_set, k):
    return _CGAL_Point_set_processing_3.compute_average_spacing(point_set, k)

def edge_aware_upsample_point_set(point_set, sharpness_angle=30., edge_sensitivity=1., neighbor_radius=-1., number_of_output_points=1000):
    return _CGAL_Point_set_processing_3.edge_aware_upsample_point_set(point_set, sharpness_angle, edge_sensitivity, neighbor_radius, number_of_output_points)

def estimate_global_k_neighbor_scale(point_set):
    return _CGAL_Point_set_processing_3.estimate_global_k_neighbor_scale(point_set)

def estimate_global_range_scale(point_set):
    return _CGAL_Point_set_processing_3.estimate_global_range_scale(point_set)

def grid_simplify_point_set(point_set, epsilon):
    return _CGAL_Point_set_processing_3.grid_simplify_point_set(point_set, epsilon)

def hierarchy_simplify_point_set(*args, **kwargs):
    return _CGAL_Point_set_processing_3.hierarchy_simplify_point_set(*args, **kwargs)

def jet_estimate_normals(point_set, k, neighbor_radius=0., degree_fitting=2):
    return _CGAL_Point_set_processing_3.jet_estimate_normals(point_set, k, neighbor_radius, degree_fitting)

def jet_smooth_point_set(point_set, k, neighbor_radius=0., degree_fitting=2, degree_monge=2):
    return _CGAL_Point_set_processing_3.jet_smooth_point_set(point_set, k, neighbor_radius, degree_fitting, degree_monge)

def mst_orient_normals(*args, **kwargs):
    return _CGAL_Point_set_processing_3.mst_orient_normals(*args, **kwargs)

def pca_estimate_normals(point_set, k, neighbor_radius=0.):
    return _CGAL_Point_set_processing_3.pca_estimate_normals(point_set, k, neighbor_radius)

def random_simplify_point_set(point_set, removed_percentage):
    return _CGAL_Point_set_processing_3.random_simplify_point_set(point_set, removed_percentage)

def remove_outliers(point_set, k, neighbor_radius=0., threshold_percent=10., threshold_distance=0.):
    return _CGAL_Point_set_processing_3.remove_outliers(point_set, k, neighbor_radius, threshold_percent, threshold_distance)

def vcm_estimate_normals(point_set, offset_radius, convolution_radius, k=0):
    return _CGAL_Point_set_processing_3.vcm_estimate_normals(point_set, offset_radius, convolution_radius, k)

def wlop_simplify_and_regularize_point_set(input, output, select_percentage=5., neighbor_radius=-1., number_of_iterations=35, require_uniform_sampling=False):
    return _CGAL_Point_set_processing_3.wlop_simplify_and_regularize_point_set(input, output, select_percentage, neighbor_radius, number_of_iterations, require_uniform_sampling)


