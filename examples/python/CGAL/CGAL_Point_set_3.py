# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""SWIG wrapper for the CGAL 3D Point Set package provided under the GPL-3.0+ license"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CGAL_Point_set_3
else:
    import _CGAL_Point_set_3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import CGAL.CGAL_Kernel
class Point_set_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CGAL_Point_set_3.Point_set_3_swiginit(self, _CGAL_Point_set_3.new_Point_set_3(*args))

    def is_empty(self):
        return _CGAL_Point_set_3.Point_set_3_is_empty(self)

    def empty(self):
        return _CGAL_Point_set_3.Point_set_3_empty(self)

    def number_of_points(self):
        return _CGAL_Point_set_3.Point_set_3_number_of_points(self)

    def size(self):
        return _CGAL_Point_set_3.Point_set_3_size(self)

    def join(self, other):
        return _CGAL_Point_set_3.Point_set_3_join(self, other)

    def clear(self):
        return _CGAL_Point_set_3.Point_set_3_clear(self)

    def clear_properties(self):
        return _CGAL_Point_set_3.Point_set_3_clear_properties(self)

    def reserve(self, c):
        return _CGAL_Point_set_3.Point_set_3_reserve(self, c)

    def resize(self, c):
        return _CGAL_Point_set_3.Point_set_3_resize(self, c)

    def insert(self, *args):
        return _CGAL_Point_set_3.Point_set_3_insert(self, *args)

    def insert_range(self, range):
        return _CGAL_Point_set_3.Point_set_3_insert_range(self, range)

    def indices(self):
        return _CGAL_Point_set_3.Point_set_3_indices(self)

    def point(self, c):
        return _CGAL_Point_set_3.Point_set_3_point(self, c)

    def normal(self, c):
        return _CGAL_Point_set_3.Point_set_3_normal(self, c)

    def remove(self, c):
        return _CGAL_Point_set_3.Point_set_3_remove(self, c)

    def is_removed(self, c):
        return _CGAL_Point_set_3.Point_set_3_is_removed(self, c)

    def garbage(self):
        return _CGAL_Point_set_3.Point_set_3_garbage(self)

    def number_of_removed_points(self):
        return _CGAL_Point_set_3.Point_set_3_number_of_removed_points(self)

    def garbage_size(self):
        return _CGAL_Point_set_3.Point_set_3_garbage_size(self)

    def has_garbage(self):
        return _CGAL_Point_set_3.Point_set_3_has_garbage(self)

    def collect_garbage(self):
        return _CGAL_Point_set_3.Point_set_3_collect_garbage(self)

    def cancel_removals(self):
        return _CGAL_Point_set_3.Point_set_3_cancel_removals(self)

    def has_int_map(self, name):
        return _CGAL_Point_set_3.Point_set_3_has_int_map(self, name)

    def add_int_map(self, name, default_value=0):
        return _CGAL_Point_set_3.Point_set_3_add_int_map(self, name, default_value)

    def int_map(self, name):
        return _CGAL_Point_set_3.Point_set_3_int_map(self, name)

    def remove_int_map(self, map):
        return _CGAL_Point_set_3.Point_set_3_remove_int_map(self, map)

    def has_float_map(self, name):
        return _CGAL_Point_set_3.Point_set_3_has_float_map(self, name)

    def add_float_map(self, name, default_value=0.0):
        return _CGAL_Point_set_3.Point_set_3_add_float_map(self, name, default_value)

    def float_map(self, name):
        return _CGAL_Point_set_3.Point_set_3_float_map(self, name)

    def remove_float_map(self, map):
        return _CGAL_Point_set_3.Point_set_3_remove_float_map(self, map)

    def has_normal_map(self):
        return _CGAL_Point_set_3.Point_set_3_has_normal_map(self)

    def add_normal_map(self):
        return _CGAL_Point_set_3.Point_set_3_add_normal_map(self)

    def normal_map(self):
        return _CGAL_Point_set_3.Point_set_3_normal_map(self)

    def remove_normal_map(self):
        return _CGAL_Point_set_3.Point_set_3_remove_normal_map(self)

    def point_map(self):
        return _CGAL_Point_set_3.Point_set_3_point_map(self)

    def copy_properties(self, other):
        return _CGAL_Point_set_3.Point_set_3_copy_properties(self, other)

    def properties(self):
        return _CGAL_Point_set_3.Point_set_3_properties(self)

    def info(self):
        return _CGAL_Point_set_3.Point_set_3_info(self)

    def range(self, *args):
        return _CGAL_Point_set_3.Point_set_3_range(self, *args)

    def points(self):
        return _CGAL_Point_set_3.Point_set_3_points(self)

    def normals(self):
        return _CGAL_Point_set_3.Point_set_3_normals(self)

    def read(self, file):
        return _CGAL_Point_set_3.Point_set_3_read(self, file)

    def write(self, file):
        return _CGAL_Point_set_3.Point_set_3_write(self, file)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3

# Register Point_set_3 in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_swigregister(Point_set_3)

class Point_set_3_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_iterator_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_iterator())

    def __iter__(self):
        return _CGAL_Point_set_3.Point_set_3_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Point_set_3.Point_set_3_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Point_set_3.Point_set_3_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Point_set_3.Point_set_3_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Point_set_3.Point_set_3_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Point_set_3.Point_set_3_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_iterator

# Register Point_set_3_iterator in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_iterator_swigregister(Point_set_3_iterator)

class Point_set_3_Point_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Point_iterator_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Point_iterator())

    def __iter__(self):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Point_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Point_iterator

# Register Point_set_3_Point_iterator in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Point_iterator_swigregister(Point_set_3_Point_iterator)

class Point_set_3_Vector_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Vector_iterator_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Vector_iterator())

    def __iter__(self):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Vector_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Vector_iterator

# Register Point_set_3_Vector_iterator in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Vector_iterator_swigregister(Point_set_3_Vector_iterator)

class Point_set_3_Int_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Int_iterator_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Int_iterator())

    def __iter__(self):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Int_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Int_iterator

# Register Point_set_3_Int_iterator in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Int_iterator_swigregister(Point_set_3_Int_iterator)

class Point_set_3_Float_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Float_iterator_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Float_iterator())

    def __iter__(self):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Point_set_3.Point_set_3_Float_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Float_iterator

# Register Point_set_3_Float_iterator in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Float_iterator_swigregister(Point_set_3_Float_iterator)

class Point_set_3_Point_map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Point_map_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Point_map())

    def get(self, idx):
        return _CGAL_Point_set_3.Point_set_3_Point_map_get(self, idx)

    def set(self, idx, t):
        return _CGAL_Point_set_3.Point_set_3_Point_map_set(self, idx, t)

    def is_valid(self):
        return _CGAL_Point_set_3.Point_set_3_Point_map_is_valid(self)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Point_map_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Point_map

# Register Point_set_3_Point_map in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Point_map_swigregister(Point_set_3_Point_map)

class Point_set_3_Vector_map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Vector_map_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Vector_map())

    def get(self, idx):
        return _CGAL_Point_set_3.Point_set_3_Vector_map_get(self, idx)

    def set(self, idx, t):
        return _CGAL_Point_set_3.Point_set_3_Vector_map_set(self, idx, t)

    def is_valid(self):
        return _CGAL_Point_set_3.Point_set_3_Vector_map_is_valid(self)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Vector_map_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Vector_map

# Register Point_set_3_Vector_map in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Vector_map_swigregister(Point_set_3_Vector_map)

class Point_set_3_Int_map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Int_map_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Int_map())

    def get(self, idx):
        return _CGAL_Point_set_3.Point_set_3_Int_map_get(self, idx)

    def set(self, idx, t):
        return _CGAL_Point_set_3.Point_set_3_Int_map_set(self, idx, t)

    def is_valid(self):
        return _CGAL_Point_set_3.Point_set_3_Int_map_is_valid(self)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Int_map_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Int_map

# Register Point_set_3_Int_map in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Int_map_swigregister(Point_set_3_Int_map)

class Point_set_3_Float_map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CGAL_Point_set_3.Point_set_3_Float_map_swiginit(self, _CGAL_Point_set_3.new_Point_set_3_Float_map())

    def get(self, idx):
        return _CGAL_Point_set_3.Point_set_3_Float_map_get(self, idx)

    def set(self, idx, t):
        return _CGAL_Point_set_3.Point_set_3_Float_map_set(self, idx, t)

    def is_valid(self):
        return _CGAL_Point_set_3.Point_set_3_Float_map_is_valid(self)

    def deepcopy(self, *args):
        return _CGAL_Point_set_3.Point_set_3_Float_map_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Point_set_3.delete_Point_set_3_Float_map

# Register Point_set_3_Float_map in _CGAL_Point_set_3:
_CGAL_Point_set_3.Point_set_3_Float_map_swigregister(Point_set_3_Float_map)



